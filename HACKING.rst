..
 (c) Copyright 2016 Hewlett Packard Enterprise Development LP
 (c) Copyright 2017 SUSE LLC

Creating a New Service
----------------------
In order to create a new service, perform the following steps:

#. Add an entry_point for your service to the ``entry_points`` section
   of ``setup.py``.  This is important since this is how Stevedore will
   locate, load, and start the service.  The ``entry`` function can be used
   to register the filename and the classname.  For example::

       entry_point={'bll.plugins': [
           # existing entries ...
           entry("nova", "NovaSvc"),
           ],
       },

#. Inherit from ``bll.plugins.service.SvcBase`` and implement methods.
   Annotate your methods with the ``@expose`` decorator, and the function will
   automatically be callable based on the name of the operation and/or
   action.

#. Document you methods using standard python docstrings per
   https://www.python.org/dev/peps/pep-0257/ .  It is especially important to
   document the parameters that each exposed method expects.

#. Add unit tests to ``tests/plugins``.  Every new feature should have
   unit tests created that test the feature.


Running Tests
-------------
"Functional" tests are tests that use the python unittest library and which
require some external resource, preventing them from being run on a normal CI
build that does not have these resources available. A typical example of this
is a plugin that requires keystone to work properly. The ideal way to test
these functions is to use mocks, but that often is impractical or will
result in meaningless tests.

Since unit tests also use the same unittest python library, what distinguishes
a functional test is that it has a ``@functional`` decorator on the class or
method. Any class with this decoration will be skipped unless the environment
variable named ``functional`` contains the string in question.

For example, to exercise all functional tests that can be
run in the current environment based on the services present, you can either
do::

    env functional=auto ./run_tests.sh

or equivalently::

    ./run_tests.sh -f auto

If, however, you want to explicitly control which tests should be run, you can
also specify the dependent services, for example::

    env functional=keystone ./run_tests.sh

When explicitly specifying dependent services, you are responsible for making
those services available before running the tests.

Specific tests can be run by giving an additional argument listing the unit tests
module/class/function to run, using the syntax specifid in
https://docs.python.org/2/library/unittest.html#command-line-interface

Coverage reports can be generated by using the ``-c`` argument to run_tests.


Building Docs
-------------
Normal Sphinx docs can be built with ``run_tests.sh --docs``.  The resulting html
documents will be created and put into the doc/build subdirectory.

